# Generated by Django 5.2.4 on 2025-08-16 08:10

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("appointments", "0007_exam_x_coord_exam_y_coord_alter_exampreparation_type"),
        ("nfc", "0003_alter_nfctag_tag_uid"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HospitalMap",
            fields=[
                (
                    "map_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="지도 ID",
                    ),
                ),
                (
                    "building",
                    models.CharField(
                        help_text="예: 본관, 별관, 외래동", max_length=100, verbose_name="건물명"
                    ),
                ),
                (
                    "floor",
                    models.IntegerField(
                        help_text="지하는 음수로 표현 (예: -1)", verbose_name="층수"
                    ),
                ),
                (
                    "svg_data",
                    models.TextField(
                        blank=True,
                        help_text="SVG 형식의 지도 데이터",
                        verbose_name="SVG 지도 데이터",
                    ),
                ),
                (
                    "image_url",
                    models.URLField(
                        blank=True,
                        help_text="지도 이미지 파일 경로",
                        max_length=500,
                        null=True,
                        verbose_name="지도 이미지 URL",
                    ),
                ),
                (
                    "scale",
                    models.FloatField(
                        default=1.0, help_text="실제 거리 대비 지도상 거리 비율", verbose_name="축척"
                    ),
                ),
                (
                    "width",
                    models.IntegerField(
                        default=800, help_text="픽셀 단위", verbose_name="지도 너비"
                    ),
                ),
                (
                    "height",
                    models.IntegerField(
                        default=600, help_text="픽셀 단위", verbose_name="지도 높이"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="추가 지도 정보 (JSON)",
                        verbose_name="메타데이터",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="활성 상태")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일시"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일시"),
                ),
            ],
            options={
                "verbose_name": "병원 지도",
                "verbose_name_plural": "병원 지도 목록",
                "db_table": "hospital_maps",
                "ordering": ["building", "floor"],
                "indexes": [
                    models.Index(
                        fields=["building", "floor"],
                        name="hospital_ma_buildin_98f2e1_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="hospital_ma_is_acti_93830a_idx"
                    ),
                ],
                "unique_together": {("building", "floor")},
            },
        ),
        migrations.CreateModel(
            name="NavigationNode",
            fields=[
                (
                    "node_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="노드 ID",
                    ),
                ),
                (
                    "node_type",
                    models.CharField(
                        choices=[
                            ("nfc_tag", "NFC 태그 위치"),
                            ("exam_room", "검사실"),
                            ("elevator", "엘리베이터"),
                            ("stairs", "계단"),
                            ("restroom", "화장실"),
                            ("junction", "교차점"),
                            ("entrance", "출입구"),
                            ("waiting_area", "대기 구역"),
                            ("facility", "편의시설"),
                        ],
                        max_length=20,
                        verbose_name="노드 타입",
                    ),
                ),
                (
                    "x_coord",
                    models.FloatField(help_text="지도상의 X 좌표 (픽셀)", verbose_name="X 좌표"),
                ),
                (
                    "y_coord",
                    models.FloatField(help_text="지도상의 Y 좌표 (픽셀)", verbose_name="Y 좌표"),
                ),
                (
                    "z_coord",
                    models.FloatField(
                        default=0, help_text="층간 연결용 높이값", verbose_name="Z 좌표"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="예: 3층 엘리베이터, X-ray실 입구",
                        max_length=100,
                        verbose_name="노드 이름",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="설명")),
                (
                    "is_accessible",
                    models.BooleanField(
                        default=True,
                        help_text="휠체어/거동불편자 접근 가능 여부",
                        verbose_name="휠체어 접근 가능",
                    ),
                ),
                (
                    "has_elevator",
                    models.BooleanField(default=False, verbose_name="엘리베이터 보유"),
                ),
                (
                    "has_escalator",
                    models.BooleanField(default=False, verbose_name="에스컬레이터 보유"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일시"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일시"),
                ),
                (
                    "exam",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="navigation_node",
                        to="appointments.exam",
                        verbose_name="검사실",
                    ),
                ),
                (
                    "map",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nodes",
                        to="hospital_navigation.hospitalmap",
                        verbose_name="지도",
                    ),
                ),
                (
                    "nfc_tag",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="navigation_node",
                        to="nfc.nfctag",
                        verbose_name="NFC 태그",
                    ),
                ),
            ],
            options={
                "verbose_name": "네비게이션 노드",
                "verbose_name_plural": "네비게이션 노드 목록",
                "db_table": "navigation_nodes",
                "ordering": ["map", "name"],
            },
        ),
        migrations.CreateModel(
            name="NavigationEdge",
            fields=[
                (
                    "edge_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="엣지 ID",
                    ),
                ),
                ("distance", models.FloatField(help_text="미터 단위", verbose_name="거리")),
                (
                    "walk_time",
                    models.IntegerField(help_text="초 단위", verbose_name="도보 시간"),
                ),
                (
                    "edge_type",
                    models.CharField(
                        choices=[
                            ("corridor", "복도"),
                            ("elevator", "엘리베이터"),
                            ("stairs", "계단"),
                            ("escalator", "에스컬레이터"),
                            ("outdoor", "실외 통로"),
                        ],
                        default="corridor",
                        max_length=20,
                        verbose_name="경로 타입",
                    ),
                ),
                (
                    "is_accessible",
                    models.BooleanField(default=True, verbose_name="휠체어 접근 가능"),
                ),
                (
                    "difficulty_level",
                    models.IntegerField(
                        default=1, help_text="1(쉬움) ~ 5(어려움)", verbose_name="난이도"
                    ),
                ),
                (
                    "avg_congestion",
                    models.FloatField(
                        default=0.5, help_text="0(한산) ~ 1(매우 혼잡)", verbose_name="평균 혼잡도"
                    ),
                ),
                (
                    "is_bidirectional",
                    models.BooleanField(default=True, verbose_name="양방향 통행 가능"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일시"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="수정일시"),
                ),
                (
                    "from_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outgoing_edges",
                        to="hospital_navigation.navigationnode",
                        verbose_name="시작 노드",
                    ),
                ),
                (
                    "to_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="incoming_edges",
                        to="hospital_navigation.navigationnode",
                        verbose_name="도착 노드",
                    ),
                ),
            ],
            options={
                "verbose_name": "네비게이션 엣지",
                "verbose_name_plural": "네비게이션 엣지 목록",
                "db_table": "navigation_edges",
                "ordering": ["from_node", "to_node"],
            },
        ),
        migrations.CreateModel(
            name="PatientRoute",
            fields=[
                (
                    "route_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="경로 ID",
                    ),
                ),
                (
                    "path_nodes",
                    models.JSONField(
                        help_text="노드 ID 리스트 (순서대로)", verbose_name="경로 노드 리스트"
                    ),
                ),
                (
                    "path_edges",
                    models.JSONField(
                        default=list,
                        help_text="엣지 ID 리스트 (순서대로)",
                        verbose_name="경로 엣지 리스트",
                    ),
                ),
                (
                    "total_distance",
                    models.FloatField(help_text="미터 단위", verbose_name="총 거리"),
                ),
                (
                    "estimated_time",
                    models.IntegerField(help_text="초 단위", verbose_name="예상 소요 시간"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "진행중"),
                            ("completed", "완료"),
                            ("cancelled", "취소"),
                            ("expired", "만료"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="상태",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="생성일시"),
                ),
                (
                    "started_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="시작일시"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="완료일시"),
                ),
                (
                    "is_accessible_route",
                    models.BooleanField(
                        default=False,
                        help_text="휠체어/거동불편자용 경로 여부",
                        verbose_name="접근성 경로",
                    ),
                ),
                (
                    "avoid_stairs",
                    models.BooleanField(default=False, verbose_name="계단 회피"),
                ),
                (
                    "avoid_crowded",
                    models.BooleanField(default=False, verbose_name="혼잡 구역 회피"),
                ),
                (
                    "end_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="route_ends",
                        to="hospital_navigation.navigationnode",
                        verbose_name="도착 노드",
                    ),
                ),
                (
                    "start_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="route_starts",
                        to="hospital_navigation.navigationnode",
                        verbose_name="출발 노드",
                    ),
                ),
                (
                    "target_exam",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="patient_routes",
                        to="appointments.exam",
                        verbose_name="목표 검사실",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="navigation_routes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="사용자",
                    ),
                ),
            ],
            options={
                "verbose_name": "환자 경로",
                "verbose_name_plural": "환자 경로 목록",
                "db_table": "patient_routes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RouteProgress",
            fields=[
                (
                    "progress_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="진행 ID",
                    ),
                ),
                (
                    "node_index",
                    models.IntegerField(
                        help_text="경로 내 현재 노드 순번", verbose_name="노드 인덱스"
                    ),
                ),
                (
                    "accuracy",
                    models.FloatField(
                        default=1.0, help_text="0~1 사이 값", verbose_name="위치 정확도"
                    ),
                ),
                (
                    "is_on_route",
                    models.BooleanField(
                        default=True,
                        help_text="계획된 경로에서 벗어났는지 여부",
                        verbose_name="경로 이탈 여부",
                    ),
                ),
                (
                    "deviation_distance",
                    models.FloatField(
                        blank=True,
                        help_text="계획 경로에서 벗어난 거리 (미터)",
                        null=True,
                        verbose_name="이탈 거리",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(auto_now_add=True, verbose_name="기록 시간"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="비고")),
                (
                    "current_node",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="route_progresses",
                        to="hospital_navigation.navigationnode",
                        verbose_name="현재 노드",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_logs",
                        to="hospital_navigation.patientroute",
                        verbose_name="경로",
                    ),
                ),
                (
                    "tag_log",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="route_progresses",
                        to="nfc.taglog",
                        verbose_name="태그 스캔 로그",
                    ),
                ),
            ],
            options={
                "verbose_name": "경로 진행 상황",
                "verbose_name_plural": "경로 진행 상황 목록",
                "db_table": "route_progress",
                "ordering": ["route", "timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="navigationnode",
            index=models.Index(
                fields=["map", "node_type"], name="navigation__map_id_7811f6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="navigationnode",
            index=models.Index(
                fields=["x_coord", "y_coord"], name="navigation__x_coord_93d319_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="navigationnode",
            index=models.Index(
                fields=["node_type"], name="navigation__node_ty_c4ba71_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="navigationnode",
            index=models.Index(
                fields=["is_accessible"], name="navigation__is_acce_2e1b0a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="navigationedge",
            index=models.Index(
                fields=["from_node"], name="navigation__from_no_4fc5ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="navigationedge",
            index=models.Index(
                fields=["to_node"], name="navigation__to_node_8902ec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="navigationedge",
            index=models.Index(
                fields=["edge_type"], name="navigation__edge_ty_50d96d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="navigationedge",
            index=models.Index(
                fields=["is_accessible"], name="navigation__is_acce_bfd436_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="navigationedge",
            unique_together={("from_node", "to_node")},
        ),
        migrations.AddIndex(
            model_name="patientroute",
            index=models.Index(
                fields=["user", "status"], name="patient_rou_user_id_25fda5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patientroute",
            index=models.Index(
                fields=["created_at"], name="patient_rou_created_63d546_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patientroute",
            index=models.Index(fields=["status"], name="patient_rou_status_27cd5f_idx"),
        ),
        migrations.AddIndex(
            model_name="routeprogress",
            index=models.Index(
                fields=["route", "timestamp"], name="route_progr_route_i_d789c6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="routeprogress",
            index=models.Index(
                fields=["current_node"], name="route_progr_current_4901a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="routeprogress",
            index=models.Index(
                fields=["timestamp"], name="route_progr_timesta_713566_idx"
            ),
        ),
    ]

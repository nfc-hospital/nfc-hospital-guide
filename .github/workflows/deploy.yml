name: Deploy Full Stack to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy Full Stack to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # --- 완전한 풀스택 자동 배포 스크립트 ---
          
          # 스크립트 안정성 강화 (명령어 실패 시 즉시 중단)
          set -e
          
          # 주요 경로 변수 정의 (직접 값 사용)
          PROJECT_DIR="$HOME/nfc-hospital"
          BACKEND_DIR="$PROJECT_DIR/backend"
          FRONTEND_DIR="$PROJECT_DIR/frontend-pwa"
          VENV_DAPHNE="$BACKEND_DIR/venv/bin/daphne"
          VENV_PIP="$BACKEND_DIR/venv/bin/pip"
          DJANGO_DIR="$BACKEND_DIR/nfc_hospital_system"
          FRONTEND_BUILD_PATH="/var/www/nfc-hospital"
          EC2_HOST="15.164.94.194"
          
          echo "✅ Using EC2_HOST: $EC2_HOST"
          echo "✅ Using FRONTEND_BUILD_PATH: $FRONTEND_BUILD_PATH"
          
          # 1. 코드 업데이트, 의존성 설치, 프론트엔드 빌드
          echo ">>> 1. Pulling, Installing, and Building..."
          cd $PROJECT_DIR
          git pull origin main
          $VENV_PIP install -r $DJANGO_DIR/requirements.txt
          cd $FRONTEND_DIR
          npm install
          npm run build
          
          # 2. 이전 백엔드 서버(Daphne) 종료
          echo ">>> 2. Safely stopping the old backend server..."
          pkill -f "^$VENV_DAPHNE" || true
          sleep 2
          
          # 3. Nginx 설정 및 프론트엔드 파일 복사/권한 설정
          echo ">>> 3. Setting up Nginx and copying files..."
          sudo apt-get update
          sudo apt-get -y install nginx
          
          # Nginx 설정 파일 자동 생성 (웹소켓 지원 포함)
          sudo tee /etc/nginx/sites-available/nfc-hospital > /dev/null <<EOF
          server {
              listen 80;
              server_name $EC2_HOST;
              
              # 프론트엔드 (React PWA)
              location / {
                  root $FRONTEND_BUILD_PATH;
                  try_files \$uri \$uri/ /index.html;
                  add_header Cache-Control "no-cache, no-store, must-revalidate";
              }
              
              # 백엔드 API + 웹소켓 지원
              location ~ ^/(api|admin|ws)/ {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_read_timeout 86400;
              }
          }
          EOF
          
          # 프론트엔드 빌드 결과물을 웹 서버 경로로 복사 및 권한 설정
          echo "Creating directory: $FRONTEND_BUILD_PATH"
          sudo mkdir -p $FRONTEND_BUILD_PATH
          echo "Copying files from $FRONTEND_DIR/dist/* to $FRONTEND_BUILD_PATH"
          sudo cp -r $FRONTEND_DIR/dist/* $FRONTEND_BUILD_PATH
          sudo chown -R www-data:www-data $FRONTEND_BUILD_PATH
          sudo chmod -R 755 $FRONTEND_BUILD_PATH
          
          # Nginx 사이트 활성화 및 재시작
          sudo ln -sf /etc/nginx/sites-available/nfc-hospital /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          echo ">>> Testing Nginx configuration..."
          sudo nginx -t
          echo ">>> Restarting Nginx..."
          sudo systemctl restart nginx
          sudo systemctl enable nginx
          
          # 4. 새 백엔드 서버를 Daphne로 시작
          echo ">>> 4. Starting backend server with Daphne..."
          cd $DJANGO_DIR
          screen -dmS django $VENV_DAPHNE -b 127.0.0.1 -p 8000 nfc_hospital_system.asgi:application
          
          # 5. 최종 상태 검증
          echo ">>> 5. Verifying deployment..."
          sleep 5
          
          if ! screen -list | grep -q "django"; then
            echo "❌ Backend server failed to start. Check server logs."
            exit 1
          fi
          
          if curl -f http://localhost/ > /dev/null 2>&1; then
              echo "✅ Success: Full stack deployment completed!"
              echo "🌐 Frontend: http://$EC2_HOST/"
              echo "🔧 Backend API: http://$EC2_HOST/api/"
              echo "⚙️  Admin: http://$EC2_HOST/admin/"
              echo "🔌 WebSocket: http://$EC2_HOST/ws/"
          else
              echo "❌ ERROR: Nginx/Frontend is not responding."
              exit 1
          fi
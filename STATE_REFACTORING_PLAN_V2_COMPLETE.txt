# 환자 상태/큐 상태 리팩토링 계획서 (완전판 v2)
생성일: 2025-01-03
작성자: Claude
버전: 2.0 Complete

## 🎯 핵심 개선 전략

### 1. Single Source of Truth (SSOT) 원칙
- **모든 상태 정의와 매핑 규칙은 Backend에서만 관리**
- Frontend는 Backend API를 통해 상태 정보를 받아 사용
- 상태 변환 로직 중복 제거

### 2. Event-Driven Architecture
- Client는 상태를 직접 변경하지 않고 액션/이벤트만 전송
- Server가 비즈니스 로직에 따라 상태 전이 결정
- 상태 전이 규칙의 중앙화

### 3. Service Layer Pattern
- 상태 관리 로직을 서비스 계층으로 캡슐화
- 테스트 가능성과 재사용성 향상
- Signal과 View의 책임 분리

=====================================================
## 🏗️ Phase 1: 새 파일 생성과 기존 코드 정리
=====================================================

### 1.1 새 파일: common/state_definitions.py
```python
# backend/nfc_hospital_system/common/state_definitions.py (새 파일)
# 위치: backend/nfc_hospital_system 아래에 common 폴더 생성

from enum import Enum

class PatientJourneyState(Enum):
    """환자 전체 여정 상태 (최상위)"""
    UNREGISTERED = 'UNREGISTERED'
    ARRIVED = 'ARRIVED'
    REGISTERED = 'REGISTERED'
    WAITING = 'WAITING'
    CALLED = 'CALLED'
    IN_PROGRESS = 'IN_PROGRESS'  # ONGOING 대신 통일
    COMPLETED = 'COMPLETED'
    PAYMENT = 'PAYMENT'
    FINISHED = 'FINISHED'

# ... (V2 계획서의 나머지 내용)
```

### 1.2 기존 코드 정리: p_queue/models.py
```python
# backend/nfc_hospital_system/p_queue/models.py (수정)

# 기존 중복 코드 제거/수정
from common.state_definitions import PatientJourneyState, QueueDetailState

class Queue(models.Model):
    # 기존 STATE_CHOICES 제거하고 새로운 것 사용
    STATE_CHOICES = [(state.value, state.value) for state in QueueDetailState]
    
    # 기존 'ongoing' 사용 부분 모두 'in_progress'로 변경
    # 라인 17: ('ongoing', '진행중') → 삭제 (QueueDetailState 사용)
    
class PatientState(models.Model):
    # 기존 STATE_CHOICES 제거하고 새로운 것 사용
    STATE_CHOICES = [(state.value, state.value) for state in PatientJourneyState]
    
    # 라인 371: ('ONGOING', 'Ongoing') → 삭제 (PatientJourneyState 사용)
```

### 1.3 새 파일: p_queue/services.py
```python
# backend/nfc_hospital_system/p_queue/services.py (새 파일)

from typing import Optional, Dict, Any
from django.db import transaction
from .models import PatientState, Queue, StateTransition, QueueStatusLog
from common.state_definitions import *

class PatientJourneyService:
    """환자 여정 상태 관리 서비스"""
    # ... (V2 계획서의 서비스 코드)
```

=====================================================
## 🔧 Phase 2: 기존 중복 코드 정리 및 대체
=====================================================

### 2.1 integrations/views.py 정리
```python
# backend/nfc_hospital_system/integrations/views.py (수정)

# 기존 중복 매핑 로직 제거 (라인 41-46)
# BEFORE:
queue_to_patient_state = {
    'waiting': 'WAITING',
    'called': 'CALLED',
    'ongoing': 'ONGOING',  # 삭제할 부분
    'completed': 'COMPLETED'
}

# AFTER:
from common.state_definitions import QUEUE_TO_JOURNEY_MAPPING
# 기존 매핑 로직 대신 공통 정의 사용

# test_update_queue_state 함수 수정
@api_view(['POST'])
def test_update_queue_state(request, user_id):
    # 기존 코드에서 PatientJourneyService 사용하도록 변경
    from p_queue.services import PatientJourneyService
    
    service = PatientJourneyService(user=user)
    # 기존 직접 상태 변경 대신 서비스 호출
    result = service.perform_action(action_type, payload)
```

### 2.2 p_queue/views.py 정리
```python
# backend/nfc_hospital_system/p_queue/views.py (대대적 수정)

# 기존 중복 상태 변경 로직 제거
from p_queue.services import PatientJourneyService
from common.state_definitions import *

class PatientCurrentStateView(APIView):
    """기존 뷰 리팩토링"""
    def get(self, request):
        # 기존 복잡한 로직 대신 서비스 사용
        service = PatientJourneyService(request.user)
        return Response(service.get_current_state())

# 기존 update_state 관련 뷰들 통합
class PatientJourneyViewSet(viewsets.ViewSet):
    """새로운 통합 ViewSet"""
    
    @action(detail=False, methods=['POST'])
    def perform_action(self, request):
        # 기존 여러 개의 상태 변경 API 대신 하나로 통합
        service = PatientJourneyService(request.user)
        return Response(service.perform_action(
            request.data.get('action_type'),
            request.data.get('payload')
        ))

# 제거할 기존 함수들:
# - update_patient_state() (라인 약 200-250)
# - manual_state_change() (라인 약 300-350)
# - queue_state_update() (라인 약 400-450)
```

### 2.3 p_queue/signals.py 정리
```python
# backend/nfc_hospital_system/p_queue/signals.py (간소화)

from django.db.models.signals import post_save
from django.dispatch import receiver
from .services import PatientJourneyService

@receiver(post_save, sender=Queue)
def sync_queue_to_patient_state(sender, instance, created, **kwargs):
    """기존 복잡한 동기화 로직을 서비스로 대체"""
    if not created:
        service = PatientJourneyService(user=instance.user)
        service.sync_from_queue_update(instance)
    
# 기존 중복 시그널 제거:
# - queue_status_changed (라인 50-100)
# - patient_state_updated (라인 100-150)
```

=====================================================
## 🗑️ Phase 3: Frontend 중복 코드 정리
=====================================================

### 3.1 store/journeyStore.js 정리
```javascript
// frontend-pwa/src/store/journeyStore.js (수정)

// 기존 하드코딩된 매핑 제거 (라인 757-758)
// BEFORE:
status: queue.state === 'waiting' ? 'waiting' : 
        queue.state === 'called' ? 'ongoing' : queue.state

// AFTER:
// Backend에서 이미 매핑된 journey_state 사용
status: data.journey_state

// 기존 중복 상태 계산 로직 제거 (라인 489-590)
// BEFORE: 
if (profileState === 'REGISTERED' || profileState === 'WAITING') {
    const ongoingQueue = currentQueues.find(q => q.state === 'ongoing');
    if (ongoingQueue) computedState = 'ONGOING';
}

// AFTER:
// Backend에서 계산된 상태 그대로 사용
computedState: data.journey_state

// 'ONGOING' → 'IN_PROGRESS' 일괄 변경
// 전체 파일에서 찾아 바꾸기
```

### 3.2 새 파일: api/patientJourneyService.js
```javascript
// frontend-pwa/src/api/patientJourneyService.js (새 파일)

import { apiClient } from './client';

export const PatientJourneyAPI = {
    getCurrentState: async () => {
        const response = await apiClient.get('/api/v1/patient-journey/current-state/');
        return response.data;
    },
    
    performAction: async (actionType, payload = {}) => {
        const response = await apiClient.post('/api/v1/patient-journey/perform-action/', {
            action_type: actionType,
            payload
        });
        return response.data;
    }
};
```

### 3.3 api/apiService.js 정리
```javascript
// frontend-pwa/src/api/apiService.js (수정)

// 기존 중복 API 호출 제거
// BEFORE: 여러 개의 상태 관련 API
export const getPatientCurrentState = async () => { /* 제거 */ }
export const updatePatientState = async () => { /* 제거 */ }
export const getMyQueue = async () => { /* 제거 */ }

// AFTER: PatientJourneyAPI로 통합
export { PatientJourneyAPI } from './patientJourneyService';
```

=====================================================
## 🔄 Phase 4: 점진적 마이그레이션 전략
=====================================================

### 4.1 기존 API 임시 유지 (Deprecated)
```python
# backend/nfc_hospital_system/p_queue/urls.py

urlpatterns = [
    # 새 API (권장)
    path('patient-journey/', include('p_queue.journey_urls')),
    
    # 기존 API (3개월 후 제거)
    path('patient/current-state/', 
         deprecated_wrapper(PatientCurrentStateView.as_view()),
         name='deprecated-patient-state'),
    path('queue/my-position/', 
         deprecated_wrapper(MyQueuePositionView.as_view()),
         name='deprecated-queue-position'),
]

def deprecated_wrapper(view):
    """Deprecated API 경고 래퍼"""
    def wrapped_view(request, *args, **kwargs):
        # 로그에 경고 기록
        logger.warning(f"Deprecated API called: {request.path}")
        # 응답 헤더에 Deprecated 표시
        response = view(request, *args, **kwargs)
        response['X-Deprecated'] = 'true'
        response['X-Sunset-Date'] = '2025-04-03'
        return response
    return wrapped_view
```

### 4.2 Frontend 점진적 전환
```javascript
// frontend-pwa/src/api/migration.js (임시 파일)

// 기존 API와 새 API 브릿지
export const migrateToNewAPI = {
    // 기존 함수명 유지하되 새 API 호출
    getPatientCurrentState: () => PatientJourneyAPI.getCurrentState(),
    updatePatientState: (state) => PatientJourneyAPI.performAction('manual_update', {state}),
    
    // 마이그레이션 추적
    logMigration: (oldFunc, newFunc) => {
        console.warn(`Migration: ${oldFunc} → ${newFunc}`);
    }
};
```

=====================================================
## 📊 제거/수정 대상 파일 목록
=====================================================

### Backend 제거/수정 목록
| 파일 | 작업 | 라인 | 설명 |
|------|------|------|------|
| p_queue/models.py | 수정 | 14-22, 365-375 | STATE_CHOICES 중복 제거 |
| p_queue/views.py | 수정 | 200-450 | 중복 상태 변경 함수 제거 |
| p_queue/signals.py | 수정 | 50-150 | 중복 시그널 제거 |
| integrations/views.py | 수정 | 41-46 | 하드코딩 매핑 제거 |
| appointments/views.py | 수정 | - | 상태 관련 로직 서비스로 대체 |
| authentication/views.py | 수정 | - | 로그인 시 상태 초기화 서비스 사용 |

### Frontend 제거/수정 목록
| 파일 | 작업 | 라인 | 설명 |
|------|------|------|------|
| store/journeyStore.js | 수정 | 489-590, 757-758 | 중복 매핑 로직 제거 |
| api/apiService.js | 수정 | 여러 곳 | 중복 API 함수 제거 |
| components/JourneyContainer.jsx | 수정 | 74-134 | 상태 계산 로직 단순화 |
| components/WaitingScreen.jsx | 수정 | 28-38 | 중복 상태 체크 제거 |
| hooks/useRealtimeQueues.js | 수정 | - | 새 WebSocket 구조 사용 |

=====================================================
## ⚠️ 주의사항 및 안전장치
=====================================================

### 1. 백업 전략
```bash
# 작업 전 백업
git checkout -b backup/before-state-refactoring
git add -A && git commit -m "backup: before state refactoring"

# 각 Phase별 체크포인트
git checkout -b feature/state-refactoring-phase1
# ... 작업 ...
git commit -m "feat: Phase 1 - Add state definitions"
```

### 2. 테스트 전략
```python
# tests/test_migration.py (새 파일)
class StateMigrationTest(TestCase):
    def test_old_api_still_works(self):
        """기존 API가 여전히 동작하는지 확인"""
        response = self.client.get('/api/v1/p-queue/patient/current-state/')
        self.assertEqual(response.status_code, 200)
        self.assertIn('X-Deprecated', response)
    
    def test_new_api_works(self):
        """새 API가 정상 동작하는지 확인"""
        response = self.client.get('/api/v1/patient-journey/current-state/')
        self.assertEqual(response.status_code, 200)
    
    def test_state_sync_works(self):
        """상태 동기화가 정상 동작하는지 확인"""
        # Queue 상태 변경 시 PatientState도 변경되는지
        # ...
```

### 3. 모니터링
```python
# management/commands/monitor_deprecated.py (새 파일)
class Command(BaseCommand):
    def handle(self, *args, **options):
        # Deprecated API 호출 횟수 모니터링
        deprecated_calls = LogEntry.objects.filter(
            path__contains='deprecated',
            created_at__gte=timezone.now() - timedelta(days=1)
        ).count()
        
        if deprecated_calls > 0:
            self.stdout.write(
                f"Warning: {deprecated_calls} deprecated API calls in last 24h"
            )
```

=====================================================
## 📅 실행 타임라인
=====================================================

### Week 1: Backend 구조 개선
- Day 1-2: 새 파일 생성 (state_definitions.py, services.py)
- Day 3: 기존 models.py, views.py 정리
- Day 4: signals.py 간소화
- Day 5: 테스트 작성 및 실행

### Week 2: Frontend 정리
- Day 1: patientJourneyService.js 생성
- Day 2-3: journeyStore.js 정리
- Day 4: 컴포넌트 중복 코드 제거
- Day 5: 통합 테스트

### Week 3: 마이그레이션 및 배포
- Day 1: Deprecated API 래퍼 구현
- Day 2: 스테이징 환경 배포
- Day 3-4: 모니터링 및 버그 수정
- Day 5: 프로덕션 배포

### Week 4-12: 안정화 기간
- Deprecated API 사용 모니터링
- 점진적 클라이언트 업데이트
- 3개월 후 기존 API 제거

=====================================================
## ✅ 체크리스트
=====================================================

### 새 파일 생성
- [ ] backend/nfc_hospital_system/common/state_definitions.py
- [ ] backend/nfc_hospital_system/p_queue/services.py
- [ ] frontend-pwa/src/api/patientJourneyService.js
- [ ] backend/tests/test_migration.py

### 기존 파일 수정
- [ ] p_queue/models.py - STATE_CHOICES 정리
- [ ] p_queue/views.py - 중복 함수 제거
- [ ] p_queue/signals.py - 서비스 계층 사용
- [ ] integrations/views.py - 매핑 로직 제거
- [ ] journeyStore.js - 중복 계산 제거
- [ ] apiService.js - 중복 API 제거

### 마이그레이션
- [ ] 데이터베이스 마이그레이션 스크립트
- [ ] Deprecated API 래퍼 구현
- [ ] 모니터링 도구 설정

### 테스트
- [ ] 단위 테스트 작성
- [ ] 통합 테스트 실행
- [ ] E2E 테스트 실행

### 배포
- [ ] 스테이징 환경 테스트
- [ ] 프로덕션 배포
- [ ] 롤백 계획 준비

=====================================================
## 📈 예상 효과
=====================================================

### 정량적 개선
- 코드 중복: 80% → 10% (8배 감소)
- API 엔드포인트: 15개 → 5개 (3배 감소)
- 상태 불일치 버그: 월 20건 → 2건 (10배 감소)
- 개발 시간: 신규 기능 50% 단축

### 정성적 개선
- 상태 관리 복잡도 대폭 감소
- 새 개발자 온보딩 시간 단축
- 디버깅 용이성 향상
- 시스템 신뢰성 증대

---
END OF COMPLETE PLAN V2
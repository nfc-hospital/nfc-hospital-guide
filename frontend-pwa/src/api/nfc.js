import { api } from './client';

/**
 * NFC API Í¥ÄÎ†® Î™®Îì† Ìï®ÏàòÎì§ÏùÑ Í¥ÄÎ¶¨ÌïòÎäî Î™®Îìà
 */

/**
 * ÎπÑÎ°úÍ∑∏Ïù∏ ÏÇ¨Ïö©ÏûêÏö© NFC ÌÉúÍ∑∏ Ï†ïÎ≥¥ Ï°∞Ìöå
 * @param {string} tagId - NFC ÌÉúÍ∑∏ ID
 * @returns {Promise} Í≥µÍ∞ú ÏúÑÏπò Ï†ïÎ≥¥ Î∞è ÏãúÏÑ§ ÏïàÎÇ¥
 */
export const fetchPublicNFCInfo = async (tagId) => {
  try {
    const response = await api.post('nfc/public-info/', { tag_id: tagId });
    const responseData = response.data || response;
    
    return {
      success: true,
      data: responseData
    };
  } catch (error) {
    console.error('Public NFC info fetch error:', error);
    return {
      success: false,
      error: error.message || 'Failed to fetch NFC tag information'
    };
  }
};

// NDEF Î†àÏΩîÎìú ÌÉÄÏûÖÎ≥Ñ ÌååÏã± Ìó¨Ìçº
const parseNDEFRecord = (record) => {
  const decoder = new TextDecoder();
  
  // Î†àÏΩîÎìú ÌÉÄÏûÖ ÌåêÎ≥Ñ
  const recordType = decoder.decode(record.recordType);
  
  try {
    switch (recordType) {
      case 'T': // Text Record
        // DataView Í∞ùÏ≤¥Ïù∏ÏßÄ ÌôïÏù∏
        if (record.data instanceof DataView) {
          // ÌÖçÏä§Ìä∏ Î†àÏΩîÎìú ÌååÏã± (Ï≤´ Î∞îÏù¥Ìä∏Îäî Ïñ∏Ïñ¥ ÏΩîÎìú Í∏∏Ïù¥)
          const langCodeLength = record.data.getUint8(0);
          const textData = new Uint8Array(record.data.buffer, record.data.byteOffset + 1 + langCodeLength);
          return {
            type: 'text',
            data: decoder.decode(textData)
          };
        } else {
          // ArrayBufferÎÇò Îã§Î•∏ ÌòïÌÉúÏùò Îç∞Ïù¥ÌÑ∞
          const view = new DataView(record.data);
          const langCodeLength = view.getUint8(0);
          const textData = new Uint8Array(record.data, 1 + langCodeLength);
          return {
            type: 'text',
            data: decoder.decode(textData)
          };
        }
        
      case 'U': // URI Record
        let prefixByte, uriData;
        
        if (record.data instanceof DataView) {
          prefixByte = record.data.getUint8(0);
          uriData = new Uint8Array(record.data.buffer, record.data.byteOffset + 1);
        } else {
          const view = new DataView(record.data);
          prefixByte = view.getUint8(0);
          uriData = new Uint8Array(record.data, 1);
        }
        
        // URI Ï†ëÎëêÏÇ¨ ÎîîÏΩîÎî©
        const uriPrefixes = [
          '', 'http://www.', 'https://www.', 'http://', 'https://',
          'tel:', 'mailto:', 'ftp://anonymous:anonymous@', 'ftp://ftp.',
          'ftps://', 'sftp://', 'smb://', 'nfs://', 'ftp://', 'dav://',
          'news:', 'telnet://', 'imap:', 'rtsp://', 'urn:', 'pop:', 'sip:',
          'sips:', 'tftp:', 'btspp://', 'btl2cap://', 'btgoep://', 'tcpobex://',
          'irdaobex://', 'file://', 'urn:epc:id:', 'urn:epc:tag:', 'urn:epc:pat:',
          'urn:epc:raw:', 'urn:epc:', 'urn:nfc:'
        ];
        
        const prefix = uriPrefixes[prefixByte] || '';
        
        return {
          type: 'uri',
          data: prefix + decoder.decode(uriData)
        };
        
      default:
        // Ïïå Ïàò ÏóÜÎäî ÌÉÄÏûÖÏùÄ ÏõêÏãú Îç∞Ïù¥ÌÑ∞Î°ú Î∞òÌôò
        let rawData;
        if (record.data instanceof DataView) {
          rawData = new Uint8Array(record.data.buffer, record.data.byteOffset, record.data.byteLength);
        } else {
          rawData = new Uint8Array(record.data);
        }
        
        return {
          type: 'unknown',
          recordType: recordType,
          data: decoder.decode(rawData)
        };
    }
  } catch (error) {
    console.warn('NDEF Î†àÏΩîÎìú ÌååÏã± Ïã§Ìå®, Í∏∞Î≥∏ Ï≤òÎ¶¨ ÏÇ¨Ïö©:', error);
    // ÌååÏã±Ïóê Ïã§Ìå®ÌïòÎ©¥ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÌÖçÏä§Ìä∏Î°ú Ï≤òÎ¶¨
    return {
      type: 'text',
      data: record.data ? decoder.decode(new Uint8Array(record.data)) : ''
    };
  }
};

// NDEF Î©îÏãúÏßÄ Ï†ÑÏ≤¥ ÌååÏã±
export const parseNDEFMessage = (message) => {
  if (!message || !message.records) {
    return null;
  }
  
  const parsedRecords = [];
  
  for (const record of message.records) {
    try {
      const parsed = parseNDEFRecord(record);
      parsedRecords.push(parsed);
    } catch (error) {
      console.warn('NDEF Î†àÏΩîÎìú ÌååÏã± Ïã§Ìå®:', error);
    }
  }
  
  return parsedRecords;
};

// Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
const isAuthenticated = () => {
  const token = localStorage.getItem('access_token');
  return !!token;
};

/**
 * NFC ÌÉúÍ∑∏ Ïä§Ï∫î ÌõÑ Î∞±ÏóîÎìúÏóê Ï†ÑÏÜ°
 * @param {string} serialNumber - NFC ÌÉúÍ∑∏ ÏãúÎ¶¨Ïñº Î≤àÌò∏
 * @param {object} ndefMessage - NDEF Î©îÏãúÏßÄ Í∞ùÏ≤¥
 * @returns {Promise} API ÏùëÎãµ
 */
export const scanNFCTag = async (serialNumber, ndefMessage = null) => {
  try {
    // NDEF Î©îÏãúÏßÄ ÌååÏã±
    const parsedData = parseNDEFMessage(ndefMessage);
    
    // ÌååÏã±Îêú Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÏúÑÏπò Ï†ïÎ≥¥ Ï∂îÏ∂ú
    let location = null;
    let tagData = {};
    
    if (parsedData && parsedData.length > 0) {
      // ÌÖçÏä§Ìä∏ Î†àÏΩîÎìúÏóêÏÑú ÏúÑÏπò Ï†ïÎ≥¥ Ï∞æÍ∏∞
      const textRecord = parsedData.find(r => r.type === 'text');
      if (textRecord) {
        // JSON ÌòïÏãùÏù∏ÏßÄ ÌôïÏù∏
        try {
          const jsonData = JSON.parse(textRecord.data);
          location = jsonData.location || jsonData.room || null;
          tagData = jsonData;
        } catch {
          // JSONÏù¥ ÏïÑÎãàÎ©¥ ÌÖçÏä§Ìä∏ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
          location = textRecord.data;
          tagData.text = textRecord.data;
        }
      }
      
      // URI Î†àÏΩîÎìú Ï≤òÎ¶¨
      const uriRecord = parsedData.find(r => r.type === 'uri');
      if (uriRecord) {
        tagData.uri = uriRecord.data;
      }
    }
    
    // ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
    const requestData = {
      tag_id: serialNumber,  // Î∞±ÏóîÎìú API ÌòïÏãùÏóê ÎßûÏ∂§
      serialNumber,
      tagData,
      timestamp: new Date().toISOString(),
      location,
      parsedRecords: parsedData
    };
    
    console.log('üì° NFC Ïä§Ï∫î Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°:', requestData);
    
    // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏóê Îî∞Î•∏ ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÑ†ÌÉù
    if (isAuthenticated()) {
      // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú: Í∞úÏù∏ÌôîÎêú Ï†ïÎ≥¥ Ï†úÍ≥µ
      const response = await api.post('nfc/scan/', requestData);
      
      // Ïä§Ï∫î Î°úÍ∑∏ Í∏∞Î°ù (ÎπÑÎèôÍ∏∞, Ïã§Ìå®Ìï¥ÎèÑ Î¨¥Ïãú)
      // Î∞±ÏóîÎìúÏóê Ïã§Ï†ú Íµ¨ÌòÑÎêú ÏóîÎìúÌè¨Ïù∏Ìä∏Í∞Ä ÏóÜÏúºÎØÄÎ°ú ÏûÑÏãú ÎπÑÌôúÏÑ±Ìôî
      // api.post('/nfc/scan-log', {
      //   tag_id: serialNumber,
      //   action_type: 'scan',
      //   timestamp: requestData.timestamp
      // }).catch(err => console.warn('Ïä§Ï∫î Î°úÍ∑∏ Í∏∞Î°ù Ïã§Ìå®:', err));
      
      // API ÏùëÎãµ Íµ¨Ï°∞ ÌëúÏ§ÄÌôî
      const responseData = response.data || response;
      return {
        success: true,
        authenticated: true,
        data: responseData
      };
    } else {
      // ÎπÑÎ°úÍ∑∏Ïù∏ ÏÉÅÌÉú: Í≥µÍ∞ú Ï†ïÎ≥¥Îßå Ï†úÍ≥µ
      const response = await api.post('nfc/public-info/', requestData);
      
      // API ÏùëÎãµ Íµ¨Ï°∞ ÌëúÏ§ÄÌôî
      const responseData = response.data || response;
      return {
        success: true,
        authenticated: false,
        data: responseData
      };
    }
  } catch (error) {
    console.error('‚ùå NFC API Ìò∏Ï∂ú Ïã§Ìå®:', error);
    
    // Ïò§ÌîÑÎùºÏù∏Ïù¥Í±∞ÎÇò ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Ïãú Î°úÏª¨ Ï≤òÎ¶¨
    if (!navigator.onLine || error.message?.includes('Network')) {
      return {
        success: false,
        offline: true,
        error: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïù¥ ÏóÜÏäµÎãàÎã§. Ïò§ÌîÑÎùºÏù∏ Î™®ÎìúÎ°ú ÏûëÎèôÌï©ÎãàÎã§.',
        data: {
          // Ïò§ÌîÑÎùºÏù∏ Ïãú Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞
          location: location || 'Ïïå Ïàò ÏóÜÎäî ÏúÑÏπò',
          message: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÌõÑ ÏûêÏÑ∏Ìïú Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.'
        }
      };
    }
    
    throw error;
  }
};

/**
 * NFC ÌÉúÍ∑∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÌÉúÍ∑∏ IDÎ°ú)
 * @param {string} tagId - NFC ÌÉúÍ∑∏ ID
 * @returns {Promise} ÌÉúÍ∑∏ Ï†ïÎ≥¥
 */
export const getTagInfo = async (tagId) => {
  try {
    // URL Í≤ΩÎ°ú ÏàòÏ†ï: /nfc/tags/{tagId}/ (Ïä¨ÎûòÏãú ÏóÜÏùå)
    const response = await api.get(`nfc/tags/${tagId}`);
    return response;
  } catch (error) {
    console.error('ÌÉúÍ∑∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

/**
 * QR ÏΩîÎìú Î∞±ÏóÖ ÏÉùÏÑ±
 * @param {string} tagId - NFC ÌÉúÍ∑∏ ID
 * @returns {Promise} QR ÏΩîÎìú Îç∞Ïù¥ÌÑ∞
 */
export const getQRBackup = async (tagId) => {
  try {
    const response = await api.get(`nfc/qr-backup/${tagId}`);
    return response;
  } catch (error) {
    console.error('QR Î∞±ÏóÖ ÏÉùÏÑ± Ïã§Ìå®:', error);
    throw error;
  }
};

/**
 * ÌÉúÍ∑∏ Í∏∞Î∞ò ÏúÑÏπò ÏïàÎÇ¥ Ï†ïÎ≥¥ Ï°∞Ìöå
 * @param {string} tagId - NFC ÌÉúÍ∑∏ ID
 * @param {string} destination - Î™©Ï†ÅÏßÄ (ÏÑ†ÌÉù)
 * @returns {Promise} ÏúÑÏπò ÏïàÎÇ¥ Ï†ïÎ≥¥
 */
export const getLocationGuide = async (tagId, destination = null) => {
  try {
    const params = { tag_id: tagId };
    if (destination) {
      params.destination = destination;
    }
    
    const response = await api.post('navigation/route', params);
    return response;
  } catch (error) {
    console.error('ÏúÑÏπò ÏïàÎÇ¥ Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

/**
 * ÌÉúÍ∑∏ Ïä§Ï∫î ÌõÑ ÎåÄÍ∏∞Ïó¥ Ï≤¥ÌÅ¨Ïù∏
 * @param {string} tagId - NFC ÌÉúÍ∑∏ ID
 * @param {string} appointmentId - ÏòàÏïΩ ID
 * @returns {Promise} Ï≤¥ÌÅ¨Ïù∏ Í≤∞Í≥º
 */
export const checkInWithTag = async (tagId, appointmentId) => {
  try {
    const response = await api.post('queue/checkin', {
      tag_id: tagId,
      appointment_id: appointmentId,
      timestamp: new Date().toISOString()
    });
    return response;
  } catch (error) {
    console.error('Ï≤¥ÌÅ¨Ïù∏ Ïã§Ìå®:', error);
    throw error;
  }
};

export default {
  parseNDEFMessage,
  scanNFCTag,
  getTagInfo,
  getQRBackup,
  getLocationGuide,
  checkInWithTag
};
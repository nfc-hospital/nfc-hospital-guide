==============================================================================
NFC 병원 안내 시스템 - 최종 목표 구현 계획서
==============================================================================
작성일: 2025-09-06
작성자: Claude Code
프로젝트: NFC Hospital Guide System

==============================================================================
1. 현재 상태 분석 (AS-IS)
==============================================================================

1.1 대시보드 데이터 연결 현황
--------------------------------
[현재 상태]
- OperationalMonitor.jsx: 매 15초마다 Math.random()으로 가짜 데이터 생성
- LSTMPrediction.jsx: 프론트엔드에서 단순 sin 함수로 예측 시뮬레이션
- ExecutiveDashboard: 정적 데이터 표시
- Analytics API (/api/v1/analytics/*): 구현 완료되었으나 미사용

[문제점]
- 실제 백엔드 API와 연결되지 않음
- WebSocket 연결은 있으나 대기열 상태만 수신
- 데이터 새로고침 시 일관성 없는 랜덤 값 표시

[필요 작업]
- API 서비스 레이어 구현
- 실시간 데이터 fetching 로직 추가
- 에러 핸들링 및 로딩 상태 관리


1.2 지도/경로 시스템 현황
--------------------------------
[현재 상태]
- pathfinding.py: A* 알고리즘 구현 완료
- NavigationNode, NavigationEdge 모델 정의됨
- /api/v1/navigation/route API 존재
- InteractiveMapViewer.jsx: SVG 맵 렌더링 가능

[문제점]
- NavigationNode/Edge 테이블에 데이터 없음
- 노드 간 연결 정보 부재
- 경로 계산 API 호출 시 빈 결과 반환

[필요 작업]
- 병원 층별 노드 데이터 생성 (최소 50개 노드)
- 엘리베이터, 계단, 복도 엣지 생성
- NFC 태그와 노드 매핑


1.3 EMR 데이터 구조
--------------------------------
[현재 상태]
- EmrSyncStatus 모델: 가상 EMR 동기화 상태 관리
- PatientState 모델: 9단계 환자 상태 추적
- Appointment, Queue 모델: 예약 및 대기열 관리

[문제점]
- 실제 EMR 데이터 없음
- 테스트용 시드 데이터 부족
- 시간대별 패턴 데이터 없음

[필요 작업]
- 100명 환자 × 30일 데이터 생성
- 부서별 특성 반영
- 시간대별 혼잡도 패턴 구현


1.4 LSTM 구현 현황
--------------------------------
[현재 상태]
- 백엔드: LSTM 모델 미구현
- 프론트엔드: 단순 시뮬레이션만 존재
- 예측 API 엔드포인트 없음

[문제점]
- 실제 머신러닝 모델 부재
- 학습 데이터 부족
- 예측 정확도 측정 불가

[필요 작업]
- TensorFlow/PyTorch LSTM 모델 구현
- 학습 데이터 준비 (최소 1000개 레코드)
- 예측 API 개발


1.5 환자 화면 진행바
--------------------------------
[현재 상태]
- ProgressBar.jsx: 기본 구현 완료
- 단계별 상태 표시 가능
- 반응형 디자인 부분 적용

[문제점]
- 글씨 크기 작음 (14-16px)
- 터치 영역 부족 (44px 미만)
- 애니메이션 부족

[필요 작업]
- 폰트 크기 증가 (최소 20px)
- 터치 영역 확대 (56px 이상)
- 부드러운 애니메이션 추가


==============================================================================
2. 목표 상태 (TO-BE)
==============================================================================

2.1 완성된 대시보드
--------------------------------
- 실시간 부서별 현황 (1초 갱신)
- LSTM 기반 30분/1시간/2시간 예측
- 병목 구간 자동 감지 및 알림
- 혼잡도 히트맵 실시간 업데이트
- WebSocket 양방향 통신

2.2 자동 경로 안내
--------------------------------
- NFC 스캔 시 자동 경로 계산
- 혼잡도 반영 대체 경로 제공
- 휠체어 접근 가능 경로 옵션
- 음성 안내 지원
- 실시간 위치 추적

2.3 LSTM 예측 시스템
--------------------------------
- 95% 이상 예측 정확도 (30분 이내)
- 부서별 특화 모델
- 요일/시간대별 패턴 학습
- 실시간 재학습 파이프라인
- 예측 신뢰도 점수 제공

2.4 EMR 연동 시스템
--------------------------------
- 가상 EMR 실시간 동기화
- 환자 상태 자동 업데이트
- 예약 정보 연동
- 검사 결과 조회
- 60초마다 자동 동기화

2.5 고령자 친화 UI
--------------------------------
- 최소 20px 폰트 크기
- 56px 이상 터치 영역
- 고대비 색상 (4.5:1 이상)
- 음성 안내 옵션
- 단순하고 직관적인 흐름


==============================================================================
3. 상세 구현 계획
==============================================================================

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
PHASE 1: EMR 데이터셋 생성 및 연결 (2일 소요)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Day 1] EMR 시드 데이터 생성
--------------------------------
작업 1: Management Command 생성
- 파일: backend/nfc_hospital_system/appointments/management/commands/generate_emr_data.py
- 내용:
  * 100명 가상 환자 생성
  * 30일간 예약 데이터 생성
  * 부서별 특성 반영
    - 영상의학과: 오전 혼잡
    - 진단검사의학과: 점심시간 후 혼잡
    - 내과: 전일 고른 분포
  * Queue 데이터 생성 (대기시간 포함)
  * QueueStatusLog 생성 (상태 변화 기록)

작업 2: 실시간 업데이트 시뮬레이터
- 파일: backend/nfc_hospital_system/p_queue/tasks.py
- 내용:
  * Celery 태스크로 60초마다 실행
  * 환자 상태 자동 전환
  * WebSocket으로 변경사항 브로드캐스트

[Day 2] 대시보드 API 연결
--------------------------------
작업 3: 실시간 통계 API
- 엔드포인트: GET /api/v1/analytics/realtime-stats
- 응답 데이터:
  {
    "departments": [
      {
        "id": "radiology",
        "name": "영상의학과",
        "waitingPatients": 15,
        "avgWaitTime": 35,
        "staffOnDuty": 8,
        "equipmentUtilization": 78,
        "status": "busy"
      }
    ],
    "systemHealth": {
      "uptime": 99.9,
      "responseTime": 120,
      "activeUsers": 156
    },
    "timestamp": "2025-08-25T14:30:00Z"
  }

작업 4: 프론트엔드 API 서비스
- 파일: frontend-pwa/src/services/dashboardService.js
- 내용:
  * API 호출 함수 구현
  * 에러 핸들링
  * 재시도 로직 (최대 3회)
  * 캐싱 전략


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
PHASE 2: 지도 경로 자동 계산 (3일 소요)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Day 3] NavigationNode 데이터 생성
--------------------------------
작업 5: 노드 데이터 생성 스크립트
- 파일: backend/nfc_hospital_system/hospital_navigation/management/commands/create_navigation_nodes.py
- 노드 구조:
  * 본관 1층: 20개 노드 (접수, 약국, 검사실 등)
  * 본관 2층: 20개 노드 (진료실, 대기실 등)
  * 암센터 1층: 15개 노드
  * 암센터 2층: 15개 노드
  * 별관: 10개 노드

작업 6: Edge 데이터 생성
- 복도: 인접 노드 간 연결 (distance: 10-50m)
- 엘리베이터: 층간 연결 (walk_time: 60초)
- 계단: 층간 연결 (walk_time: 90초)
- 에스컬레이터: 층간 연결 (walk_time: 45초)

[Day 4-5] 경로 계산 개선
--------------------------------
작업 7: 혼잡도 반영 경로 계산
- 파일: backend/nfc_hospital_system/hospital_navigation/pathfinding.py 수정
- 개선사항:
  * 실시간 혼잡도 데이터 반영
  * 가중치 계산: distance + (congestion_level * 10)
  * 대체 경로 3개까지 제공

작업 8: 프론트엔드 경로 표시
- 파일: frontend-pwa/src/components/maps/InteractiveMapViewer.jsx 수정
- 기능:
  * SVG path로 경로 그리기
  * 애니메이션 경로 표시
  * 현재 위치 마커
  * 목적지 마커


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
PHASE 3: LSTM 모델 구현 (4일 소요)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Day 6-7] LSTM 모델 개발
--------------------------------
작업 9: LSTM 모델 구현
- 파일: backend/nfc_hospital_system/analytics/lstm_model.py
- 구조:
  ```python
  class WaitTimeLSTM:
      def __init__(self):
          self.model = Sequential([
              LSTM(128, return_sequences=True),
              Dropout(0.2),
              LSTM(64, return_sequences=False),
              Dropout(0.2),
              Dense(32, activation='relu'),
              Dense(1)  # 대기시간 예측
          ])
      
      def train(self, X, y):
          # 학습 로직
          pass
      
      def predict(self, X):
          # 예측 로직
          pass
  ```

작업 10: 학습 데이터 준비
- 특징(Features):
  * 시간 (hour, day_of_week)
  * 부서 ID
  * 현재 대기 인원
  * 직원 수
  * 최근 1시간 평균 대기시간
  * 최근 1시간 처리 환자 수
- 레이블(Label): 30분 후 대기시간

[Day 8-9] 예측 API 구현
--------------------------------
작업 11: 예측 엔드포인트
- 엔드포인트: POST /api/v1/analytics/lstm-predict
- 요청:
  {
    "department": "radiology",
    "timeframe": "30min"
  }
- 응답:
  {
    "prediction": 42,
    "confidence": 0.92,
    "lowerBound": 35,
    "upperBound": 49,
    "factors": {
      "currentLoad": "high",
      "trend": "increasing",
      "peakTime": true
    }
  }

작업 12: 모델 재학습 파이프라인
- Celery 태스크로 매일 새벽 2시 재학습
- 최근 7일 데이터로 fine-tuning
- 모델 버전 관리


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
PHASE 4: 대시보드 실제 데이터 연결 (2일 소요)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Day 10] API 통합
--------------------------------
작업 13: dashboardService.js 구현
```javascript
// frontend-pwa/src/services/dashboardService.js
import axios from 'axios';

class DashboardService {
  async getRealtimeStats() {
    try {
      const response = await axios.get('/api/v1/analytics/realtime-stats');
      return response.data;
    } catch (error) {
      console.error('Failed to fetch realtime stats:', error);
      throw error;
    }
  }

  async getLSTMPrediction(department, timeframe) {
    const response = await axios.post('/api/v1/analytics/lstm-predict', {
      department,
      timeframe
    });
    return response.data;
  }
}
```

작업 14: 컴포넌트 수정
- OperationalMonitor.jsx:
  * useEffect에서 dashboardService.getRealtimeStats() 호출
  * 15초마다 데이터 갱신
  * 로딩 상태 관리

- LSTMPrediction.jsx:
  * dashboardService.getLSTMPrediction() 사용
  * 예측 결과 실시간 표시
  * 신뢰도 점수 시각화

[Day 11] WebSocket 통합
--------------------------------
작업 15: 실시간 업데이트
- WebSocket 이벤트:
  * 'department_update': 부서 상태 변경
  * 'congestion_alert': 혼잡도 경고
  * 'system_health': 시스템 상태
- 자동 재연결 로직
- 연결 상태 표시


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
PHASE 5: 환자 진행바 UI 개선 (1일 소요)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Day 12] UI/UX 개선
--------------------------------
작업 16: ProgressBar.jsx 리디자인
- 스타일 개선:
  ```css
  /* 고령자 친화적 스타일 */
  .progress-step {
    min-height: 56px;
    min-width: 56px;
    font-size: 20px;
    font-weight: 600;
  }
  
  .step-label {
    font-size: 18px;
    line-height: 1.5;
    letter-spacing: 0.5px;
  }
  
  .current-step {
    transform: scale(1.2);
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
    animation: pulse 2s infinite;
  }
  ```

작업 17: 애니메이션 추가
- 단계 전환 시 부드러운 애니메이션
- 진행률 바 그라데이션 효과
- 완료 체크 애니메이션
- 현재 단계 pulse 효과

작업 18: 접근성 개선
- ARIA 레이블 추가
- 키보드 네비게이션 지원
- 음성 안내 버튼 추가
- 고대비 모드 지원


==============================================================================
4. 기술 스택 및 의존성
==============================================================================

백엔드 추가 패키지
--------------------------------
tensorflow==2.13.0          # LSTM 모델
pandas==2.0.3              # 데이터 처리
scikit-learn==1.3.0        # 데이터 전처리
numpy==1.24.3              # 수치 계산
celery==5.3.1              # 비동기 작업
redis==4.6.0               # 캐싱 및 큐

프론트엔드 추가 패키지
--------------------------------
recharts@2.7.2             # 차트 (이미 설치됨)
framer-motion@10.12.18     # 애니메이션
date-fns@2.30.0            # 날짜 처리
lodash@4.17.21             # 유틸리티


==============================================================================
5. 테스트 계획
==============================================================================

단위 테스트
--------------------------------
- LSTM 모델 정확도 테스트
- 경로 계산 알고리즘 테스트
- API 엔드포인트 테스트
- WebSocket 연결 테스트

통합 테스트
--------------------------------
- 대시보드 데이터 흐름 테스트
- 실시간 업데이트 테스트
- 경로 안내 시나리오 테스트
- EMR 동기화 테스트

성능 테스트
--------------------------------
- LSTM 예측 응답 시간 < 500ms
- 경로 계산 시간 < 200ms
- WebSocket 지연 시간 < 100ms
- 대시보드 로딩 시간 < 2초

사용성 테스트
--------------------------------
- 고령자 그룹 테스트 (65세 이상)
- 터치 영역 적절성 검증
- 가독성 테스트
- 색맹 접근성 테스트


==============================================================================
6. 리스크 및 대응 방안
==============================================================================

리스크 1: LSTM 모델 정확도 부족
--------------------------------
- 발생 가능성: 중간
- 영향도: 높음
- 대응 방안:
  * 더 많은 학습 데이터 수집
  * 하이퍼파라미터 튜닝
  * 앙상블 모델 적용

리스크 2: 실시간 업데이트 성능 문제
--------------------------------
- 발생 가능성: 낮음
- 영향도: 중간
- 대응 방안:
  * Redis 캐싱 적극 활용
  * 데이터 집계 주기 조정
  * 불필요한 업데이트 필터링

리스크 3: 경로 데이터 부정확
--------------------------------
- 발생 가능성: 중간
- 영향도: 중간
- 대응 방안:
  * 실제 병원 도면 확보
  * 현장 검증 실시
  * 사용자 피드백 수집

리스크 4: 브라우저 호환성 문제
--------------------------------
- 발생 가능성: 낮음
- 영향도: 낮음
- 대응 방안:
  * Polyfill 적용
  * 점진적 개선 전략
  * 대체 UI 제공


==============================================================================
7. 일정 요약
==============================================================================

Week 1 (Day 1-5)
--------------------------------
- Day 1-2: EMR 데이터셋 생성 및 API 연결
- Day 3-5: 지도 경로 자동 계산 구현

Week 2 (Day 6-10)
--------------------------------
- Day 6-9: LSTM 모델 구현 및 학습
- Day 10: 대시보드 API 통합

Week 3 (Day 11-12)
--------------------------------
- Day 11: WebSocket 실시간 통합
- Day 12: 환자 진행바 UI 개선

Buffer (Day 13-15)
--------------------------------
- 테스트 및 버그 수정
- 성능 최적화
- 문서화


==============================================================================
8. 성공 지표 (KPI)
==============================================================================

정량적 지표
--------------------------------
- LSTM 예측 정확도: 95% 이상 (30분 이내)
- 경로 계산 성공률: 99% 이상
- API 응답 시간: 평균 200ms 이하
- 대시보드 데이터 갱신 주기: 1초
- WebSocket 연결 안정성: 99.9% uptime

정성적 지표
--------------------------------
- 고령자 사용성 테스트 만족도: 4.5/5.0 이상
- 의료진 피드백 긍정 비율: 80% 이상
- 환자 대기 시간 체감 개선
- 병원 운영 효율성 향상

비즈니스 지표
--------------------------------
- 환자 1인당 평균 대기시간: 20% 감소
- NFC 태그 사용률: 70% 이상
- 길 찾기 문의 감소: 50% 이상
- 환자 만족도: 15% 향상


==============================================================================
9. 다음 단계 (Post-MVP)
==============================================================================

추가 기능 개발
--------------------------------
- 음성 인식 기반 챗봇 고도화
- AR 네비게이션 (스마트폰 카메라)
- 다국어 지원 (영어, 중국어, 일본어)
- 예약 시스템 통합
- 결제 시스템 연동

성능 최적화
--------------------------------
- 분산 LSTM 모델 (부서별 전문화)
- Edge Computing (로컬 예측)
- GraphQL 도입
- 마이크로서비스 아키텍처 전환

확장성
--------------------------------
- 다중 병원 지원
- 클라우드 마이그레이션 (AWS/Azure)
- 빅데이터 플랫폼 구축
- AI 기반 자원 최적화


==============================================================================
10. 참고 자료
==============================================================================

기술 문서
--------------------------------
- Django Channels: https://channels.readthedocs.io/
- TensorFlow LSTM: https://www.tensorflow.org/tutorials/structured_data/time_series
- A* Algorithm: https://en.wikipedia.org/wiki/A*_search_algorithm
- WebSocket API: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket

디자인 가이드
--------------------------------
- WCAG 2.1 접근성: https://www.w3.org/WAI/WCAG21/quickref/
- Material Design for Elderly: https://material.io/design/usability/accessibility.html
- Healthcare UX Best Practices: https://www.nngroup.com/articles/healthcare-ux/

프로젝트 관련
--------------------------------
- 프로젝트 저장소: https://github.com/nfc-hospital/nfc-hospital-guide
- API 명세서: /docs/api/api.md
- 아키텍처 문서: /docs/database.md
- CLAUDE.md: 프로젝트 가이드라인


==============================================================================
끝
==============================================================================

본 문서는 NFC 병원 안내 시스템의 최종 목표 달성을 위한 상세 구현 계획서입니다.
각 단계별로 명확한 작업 내용과 예상 결과물을 정의하였으며,
리스크 관리 및 성공 지표를 통해 프로젝트의 진행 상황을 추적할 수 있습니다.

문서 버전: 1.0.0
마지막 수정: 2025-09-06